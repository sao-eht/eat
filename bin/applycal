#!/usr/bin/env python

import os
import sys
import glob
import argparse
from eat.io.uvfits import convert_uvfits_to_datastruct
from eat.postproc import cal_amplitude_farotate as caf
from eat.postproc.utils import read_station_mounts
import logging

# Configure logging
loglevel = getattr(logging, 'INFO', None)
logging.basicConfig(level=loglevel,
                    format='%(asctime)s %(levelname)s:: %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')

# metadata files generated in stage 6 -- the naming convention follows the one used by L1 team
ARRAY_FILE = 'array.txt'
AZ2Z_FILE = 'cf7_AZ2Z.txt'
SMT2Z_FILE = 'cf7_SMT2Z.txt'

def create_parser():
    p = argparse.ArgumentParser()

    p.add_argument("datadir", help="Directory containing input UVFITS files")
    p.add_argument("wrkdir", help="Current working directory")
    p.add_argument("caldir", help="Directory containing input calibration tables")
    p.add_argument("outdir", help="Directory to which calibrated UVFITS files must be written")
    p.add_argument("metadir", help="Directory containing calibration metadata (EHTIM-style array.txt file)")
    p.add_argument("--arrayfile", type=str, default=ARRAY_FILE, help="EHTIM-style array.txt file containing station mount types and feed offsets")
    p.add_argument('--az2zfile', type=str, default=AZ2Z_FILE, help="File containing az2z dict")
    p.add_argument('--smt2zfile', type=str, default=SMT2Z_FILE, help="File containing smt2z dict")
    p.add_argument('--identifier', type=str, default='', help="Identifier tag to suffix uvfits filenames with (apart from the automatic identifiers introduced by this script)")
    p.add_argument('--interpkind', type=str, default='linear', help="Kind of interpolation to perform (scipy-compatible)")
    p.add_argument('--extrapolate', action='store_true', help='Toggle whether to extrapolate gain tables')
    p.add_argument('--sqrtgains', action='store_true', help='Toggle whether to take square root of gains before applying')
    p.add_argument('--skipfluxcal', action='store_true', help='Toggle whether to perform a priori flux calibration')
    p.add_argument('--skipfrotcorr', action='store_true', help='Toggle whether to perform field angle rotation correction')
    p.add_argument('--mixedpol', action='store_true', help='Toggle whether the input data are in mixed polarization basis')
    p.add_argument('--keepllabsphase', action='store_true', help='Toggle whether to keep absolute phase of LL* (i.e. do not rotate)')
    p.add_argument('--elevmodule', type=str, default='astropy', choices=['astropy', 'ehtim'], help="Python module to use to compute elevation")
    p.add_argument('--elevinterpkind', type=str, default='cubic', help="kind of interpolation to perform (scipy-compatible)")
    p.add_argument('--interpolatedt', type=float, default=1., help="Interpolation resolution for integration time dt in seconds")
    p.add_argument('--errorscale', type=float, default=1., help="Error scaling factor")

    return p

def main(args):
    logging.info('**************** A priori amplitude calibration and field angle rotation correction ****************')
    logging.info(f"Applying calibration tables (SEFDs) from {args.caldir}\nto uvfits files in {args.datadir}\nand writing results to {args.outdir}")

    # Read in station mount types from input ehtim-style array.txt file
    station_frot = read_station_mounts(os.path.join(args.metadir, args.arrayfile), 
                                       os.path.join(args.wrkdir, args.az2zfile), 
                                       os.path.join(args.wrkdir, args.smt2zfile))
    
    if args.skipfluxcal: logging.warning(f'Will skip a priori flux calibration since skipfluxcal={args.skipfluxcal}.')
    else: logging.info(f'Will perform a priori flux calibration.')

    # Account for mixed polarization basis
    if args.mixedpol:
        logging.info('Input data are in mixed polarization basis. Ensuring that field angle rotation correction is skipped i.e. skipfrotcorr=True.')
        args.skipfrotcorr = True  # skip field angle rotation correction for mixedpol data

    if args.skipfrotcorr: logging.warning(f'Will skip field angle rotation correction since skipfrotcorr={args.skipfrotcorr}.')
    else: logging.info('Will perform field angle rotation correction.')

    uvfitsfiles = sorted(glob.glob(os.path.join(args.datadir, '*.uvfits')))

    # exclude previously averaged uvfits files
    excludepattern = "+avg.uvfits"
    uvfitsfiles = [uvf for uvf in uvfitsfiles if excludepattern not in uvf]
    logging.info(f'List of uvfits files to calibrate: {uvfitsfiles}')

    # For each uvfitsfile, perform requested calibration steps and write output to a new uvfits file
    for uvfitsfile in uvfitsfiles:
        logging.info(f"Calibrating file {uvfitsfile}...")

        tok = uvfitsfile.split('/')[-1].replace('.uvfits', '').split('_', 2)
        logging.info(f"Calibration pipeline: {tok[0]}")
        logging.info(f"Expt no: {tok[1]}")
        logging.info(f"Source: {tok[2]}")

        # Convert uvfits to ehtim data structure.
        # Internally, this reads a UVFITS file, loads it into a "UVFITS" type Datastruct object,
        # and then converts it to an "EHTIM" type Datastruct object.
        datastruct_ehtim = convert_uvfits_to_datastruct(uvfitsfile)

        # ensure source names are consistent between ehtim data structure and the input uvfits filenames
        source = datastruct_ehtim.obs_info.src
        if len(source) <= 8 and source != tok[2]:
            logging.warning(f"Source name '{source}' inside the uvfits file does not match '{tok[2]}' in the filename! Using name {tok[2]} from filename instead...")
            source = tok[2]
            datastruct_ehtim.obs_info.src = tok[2]

        # load SEFDs required for amplitude calibration
        caltable = caf.load_caltable_ds(datastruct_ehtim, args.caldir, sqrt_gains=args.sqrtgains, skip_fluxcal=args.skipfluxcal)
        if not caltable:
            logging.warning(f'Could not find caltable in {args.caldir} for {source}! Skipping {uvfitsfile}.')
            continue

        # Set filename for output uvfits
        outname = os.path.join(args.outdir, os.path.basename(uvfitsfile).replace('.uvfits', args.identifier+'.apriori.uvfits'))

        caf.apply_caltable_uvfits(caltable, datastruct_ehtim, outname, interp=args.interpkind, extrapolate=args.extrapolate, \
                                  frotcal=not(args.skipfrotcorr), elev_function=args.elevmodule, interp_dt=args.interpolatedt, \
                                  elev_interp_kind=args.elevinterpkind, err_scale=args.errorscale, skip_fluxcal=args.skipfluxcal, \
                                  keep_absolute_phase=args.keepllabsphase, station_frot=station_frot)

        logging.info(f'Saved {outname}.')
    
    return 0

if __name__=='__main__':
    args = create_parser().parse_args()
    ret = main(args)
    sys.exit(ret)

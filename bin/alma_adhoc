#!/usr/bin/env python

# use ALMA to reference adhoc phases to other sites
# 2017-09-15 Lindy Blackburn
# 2017-12-20 LLB allow multiple pol stacking, non-ALMA reference
# 2024-05-29 LLB handle case where polprod have different lengths (use max)

from eat.io import hops, util
from eat.hops import util as hu
import numpy as np
import os
import sys
import argparse
import datetime
import pwd

# logging
statline = '[%s] %s@%s:%s$ %s' % (datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), pwd.getpwuid(os.getuid())[0], os.uname()[1], os.getcwd(), ' '.join(sys.argv))

parser = argparse.ArgumentParser()
parser.add_argument('filename', help='alist file')
parser.add_argument('-d', '--datadir', help='use fringe files from this data directory', default='.')
parser.add_argument('-o', '--outdir', help='output directory for adhoc files (one per scan)', default=None)
parser.add_argument('-q', '--quiet', help='do not print cfcodes to stdout (they are saved in adhoc_codes)', action='store_true', default=False)
parser.add_argument('-c', '--cohtime', help='coherence timescale to use for deciding INTTIME', default=None, type=float)
parser.add_argument('-t', '--threshold', help='SNR threshold for detection', default=7.0, type=float)
parser.add_argument('-nf', '--no-fix', help='do not apply alist fixes', action="store_true")
args = parser.parse_args()

"""
Note: according to doc/fourfit/file_based_pcal.tex,

The time points are considered to be either instantaneous values, or the
result of a linear average of the phase, symmetric about the specified epoch.
The algorithm within fourfit performs a linear interpolation between the
specified points, and then finds the average value of the piece-wise linear
function so derived over each accumulation period in a fringe fit. If the ap
data extends beyond the range of the piecewise linear pcal function, then the
function is extrapolated linearly (if possible) to cover the ap.

so an effort should be made to accurately timestamp the middle of the segment

however currently fourfit has an off-by-one bug so the timestamp must be 1 AP prior

add_days converts straight from timetag, which is halfway into scan for fingex
but only a 1s precision. for alist it is generally start of segment, but might
be different in case of a scan_offset ?
"""

if args.outdir is not None and not os.path.exists(args.outdir):
    os.makedirs(args.outdir)

def adhocref(df, ref=None, outdir=None, timeoffset=0., tcoh=args.cohtime):
    """use reference site to make adhoc phases to other stations in data frame

    Args:
        df: pandas.DataFrame in alist format covering only one scan
        ref: reference site code (default A)
        **kwargs: extra conditional (e.g. scan_id) filter to apply on df
    """
    import datetime
    from eat.io import mk4
    import itertools
    cfcodes = []
    # apply any filters given in kwargs

    outdir = '.' if outdir is None else outdir

    # will put LL as ref in visib stacking if available
    df = df.sort_values("timetag baseline polarization".split())
    util.add_path(df)

    # reverse sign of phases where ref is second site
    for (scantuple, ttrows) in df.groupby(['expt_no', 'scan_id']):
        ttref = ref or hu.pickref(ttrows) # reference station for this scan
        if ttref is None: # unable to find reference station, do not adhoc phase this scan
            continue
        # we are sorting by baseline, length here in order to filter by maximum length later on in the script
        wref = ttrows[(ttrows.baseline.str.contains(ttref)) & (ttrows.snr > args.threshold)].sort_values(['baseline', 'length'])
        noref = ttrows[~ttrows.baseline.str.contains(ttref)].sort_values(['baseline', 'length'])
        segment = dict()
        # generate adhoc phases which are connected to ref station
        for (bl, rows) in wref.groupby('baseline'):
            # print(rows["timetag baseline polarization snr".split()])
            p = hu.params(rows.iloc[-1].path, quiet=True) # representative params using maximum length row
            ttrem = p.baseline.replace(ttref, "")
            segment[ttrem] = [p.start, p.stop] # ad-hoc phased times for REM station
            print(p.timetag + ' ' + p.baseline)
            userows = rows[rows.length == rows.iloc[-1].length]
            v = hu.align(userows.path, snrs=userows.snr) # stack data from detected fringes
            ah = hu.adhoc(v, ref=ttref, snr=np.sqrt((userows.snr**2).sum()), timeoffset=timeoffset, p=p, tcoh=tcoh,
                          prefix='' if outdir == '.' else outdir + '/')
            out = open(ah.filename, 'w')
            out.write(ah.string)
            if not args.quiet:
                print(ah.cfcode.strip())
            cfcodes.append(ah.cfcode.strip())
        # trim other baselines to cover ad-hoc time
        for (bl, rows) in noref.groupby('baseline'):
            p = hu.params(rows.iloc[-1].path, quiet=True) # params for last (maximum length row)
            if bl[0] in segment and bl[1] in segment: # trim if both sites were ad-hoc phased
                start = max(segment[bl[0]][0], segment[bl[1]][0])
                stop  = min(segment[bl[0]][1], segment[bl[1]][1])
                if (start > p.start) or (stop < p.stop):
                    htop = datetime.datetime(p.start.year, p.start.month, p.start.day, p.start.hour) # top of hour of scan
                    code = "if scan %s and baseline %s start %d stop %d" % \
                                   (p.scantag, bl, (start-htop).total_seconds(), (stop-htop).total_seconds())
                    if not args.quiet:
                        print(code)
                    cfcodes.append(code)
    outcf = open(outdir + '/' + 'adhoc_cfcodes', 'w')
    outcf.write('* ' + statline + '\n')
    outcf.write('\n')
    outcf.write('\n'.join(cfcodes))
    outcf.write('\n')

hu.set_datadir(args.datadir)
a = util.noauto(hops.read_alist(args.filename))
if not args.no_fix:
    util.fix(a) # fix various polconvert errors

# adhocref(a, outdir=args.outdir, timeoffset=-1.)
# the original timeoffset was used to address a fourfit indexing bug, which is fixed in current build
adhocref(a, outdir=args.outdir, timeoffset=0.)

#!/usr/bin/env python

# SNR table from alist(s)

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('filename', nargs='+', help='alist txt file(s)')
parser.add_argument('-t', '--tags', help='tags for each alist file', nargs='*', default=[])
parser.add_argument('-r', '--ref', help='reference station', default=None)
parser.add_argument('-g', '--grid', help='grid baselines for output', default=False, action='store_true')
parser.add_argument('-i', '--index', help='pivot table index', nargs='+', default='expt_no timetag scan_id source polarization'.split())
parser.add_argument('-c', '--columns', help='pivot table columns', nargs='+', default=['baseline'])
parser.add_argument('-v', '--values', help='pivot table values', nargs='+', default=['snr'])
parser.add_argument('-s', '--source', help='filter by source', default=None)
parser.add_argument('-p', '--polarization', help='filter by polarization', nargs='+', default=['LL', 'LR', 'RL', 'RR'])
parser.add_argument('-b', '--groupby', help='group output by columns', nargs='*', default=[])
parser.add_argument('-nf', '--no-fix', help='do not apply alist fixes', action="store_true")
args = parser.parse_args()

from eat.io import hops, util
from eat.hops import util as hu
import pandas as pd

alists = [hops.read_alist(af) for af in args.filename]
tags = args.tags if len(args.tags) > 0 else map(str, range(len(args.filename)))

if len(alists) > 1:
    for (a, tag) in zip(alists, tags):
        a['tag'] = tag
    a = pd.concat(alists, ignore_index=True)
    if 'tag' not in args.index and 'tag' not in args.columns:
        args.index.append('tag')
else:
    a = alists[0]

if not args.no_fix:
    util.fix(a)

isrc = (a.source == args.source if args.source else True)
ipol = (a.polarization.isin(set(args.polarization)))
iref = (a.baseline.str.contains(args.ref) if args.ref else True)

a = a[isrc & ipol & iref].copy()

pd.options.display.float_format = '{:.1f}'.format
cols = ' '.join(args.values)
if 'delay' in cols or 'mbd' in cols or 'sbd' in cols:
    pd.options.display.float_format = '{:.6f}'.format

if args.grid is None:
    nbaselines = len(set(a.baseline))
    if nbaselines > 15: # 7 or more stations
        args.grid = True

if args.grid and 'baseline' in args.columns:
    hu.setparity(a)
    a['ref'] = a.baseline.str[0]
    a['rem'] = a.baseline.str[1]
    args.index.append('ref')
    args.columns.remove('baseline')
    args.columns.append('rem')

b = util.noauto(a)

if len(args.groupby) > 0:
    for (name, grp) in b.groupby(args.groupby):
        print(grp.pivot_table(index=args.index, columns=args.columns, values=args.values).to_string(na_rep='.', sparsify=True))
else:
    print(b.pivot_table(index=args.index, columns=args.columns, values=args.values).to_string(na_rep='.', sparsify=True))

